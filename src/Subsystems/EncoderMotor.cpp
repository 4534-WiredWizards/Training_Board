// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "../../../../git/Training_Board/src/Subsystems/EncoderMotor.h"

#include "../../../../git/Training_Board/src/RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

EncoderMotor::EncoderMotor() : Subsystem("EncoderMotor") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    quadratureEncoder1 = RobotMap::encoderMotorQuadratureEncoder1;
    speedController1 = RobotMap::encoderMotorSpeedController1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void EncoderMotor::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void EncoderMotor::SetMotor(double speed) {
	speedController1->Set(speed);
}
void EncoderMotor::StopMotor() {
	speedController1->StopMotor();
}
int EncoderMotor::GetEncoder(){
	return quadratureEncoder1->Get();
}
void EncoderMotor::ResetEncoder(){
	quadratureEncoder1->Reset();
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

